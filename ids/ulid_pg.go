package ids

import (
	"context"

	"github.com/jackc/pgx/v5/pgxpool"
)

// ULIDPgGenerator generates ULIDs using the pg-ulid extension
type ULIDPgGenerator struct{}

var _ IDGenerator = (*ULIDPgGenerator)(nil)

func NewULIDPGGenerator() ULIDPgGenerator {
	return ULIDPgGenerator{}
}

func (g ULIDPgGenerator) Generate() string {
	// ULID is generated by the database, so this might return an empty string or a placeholder.
	return ""
}

func (g ULIDPgGenerator) CreateTable(ctx context.Context, pool *pgxpool.Pool) error {
	err := g.LoadULIDFunction(ctx, pool)
	if err != nil {
		return err
	}
	_, err = pool.Exec(ctx, "CREATE TABLE IF NOT EXISTS ulid_pg_table (id ulid PRIMARY KEY DEFAULT gen_ulid(), n BIGINT NOT NULL)")
	return err
}

func (g ULIDPgGenerator) DropTable(ctx context.Context, pool *pgxpool.Pool) error {
	_, err := pool.Exec(ctx, "DROP TABLE IF EXISTS ulid_pg_table")
	return err
}

func (g ULIDPgGenerator) InsertRecord(ctx context.Context, pool *pgxpool.Pool) error {
	_, err := pool.Exec(ctx, "INSERT INTO ulid_pg_table (n) VALUES (1)")
	return err
}

func (g ULIDPgGenerator) BulkWriteRecords(ctx context.Context, pool *pgxpool.Pool, count uint64) error {
	_, err := pool.Exec(ctx, "INSERT INTO ulid_pg_table (n) SELECT g.n FROM generate_series(1, $1) AS g(n)", count)
	return err
}

func (g ULIDPgGenerator) CollectStats(ctx context.Context, pool *pgxpool.Pool) (map[string]any, error) {
	stats := make(map[string]any)
	var totalTableSize, dataSize, indexSize string
	err := pool.QueryRow(ctx, statsQuery, "ulid_pg_table").Scan(&totalTableSize, &dataSize, &indexSize)
	if err != nil {
		return nil, err
	}
	stats["total_table_size"] = totalTableSize
	stats["data_size"] = dataSize
	stats["index_size"] = indexSize
	return stats, nil
}

func (g ULIDPgGenerator) LoadULIDFunction(ctx context.Context, pool *pgxpool.Pool) error {
	sql := `
	CREATE EXTENSION IF NOT EXISTS ulid with schema public;
	`
	_, err := pool.Exec(ctx, sql)
	return err
}
