package ids

import (
	"context"

	"github.com/jackc/pgx/v5/pgxpool"
)

// BigSerialGenerator generates BigSerial IDs
type BigSerialGenerator struct{}

var _ IDGenerator = (*BigSerialGenerator)(nil)

func NewBigSerialGenerator() BigSerialGenerator {
	return BigSerialGenerator{}
}

func (g BigSerialGenerator) Generate() string {
	// BigSerial is generated by the database
	return ""
}

func (g BigSerialGenerator) Name() string {
	return "BIGSERIAL - BIGINT"
}

func (g BigSerialGenerator) CreateTable(ctx context.Context, pool *pgxpool.Pool) error {
	_, err := pool.Exec(ctx, "CREATE TABLE IF NOT EXISTS bigserial_table (id BIGSERIAL PRIMARY KEY, n BIGINT NOT NULL)")
	return err
}

func (g BigSerialGenerator) DropTable(ctx context.Context, pool *pgxpool.Pool) error {
	_, err := pool.Exec(ctx, "DROP TABLE IF EXISTS bigserial_table")
	return err
}

func (g BigSerialGenerator) InsertRecord(ctx context.Context, pool *pgxpool.Pool) error {
	_, err := pool.Exec(ctx, "INSERT INTO bigserial_table DEFAULT VALUES")
	if err != nil {
		return err
	}
	return nil
}

func (g BigSerialGenerator) BulkWriteRecords(ctx context.Context, pool *pgxpool.Pool, count uint64) error {
	_, err := pool.Exec(ctx, "INSERT INTO bigserial_table (n) SELECT g.n FROM generate_series(1, $1) AS g(n)", count)
	return err
}

func (g BigSerialGenerator) CollectStats(ctx context.Context, pool *pgxpool.Pool) (map[string]any, error) {
	stats := make(map[string]any)
	var totalTableSize, dataSize, indexSize string
	err := pool.QueryRow(ctx, statsQuery, "bigserial_table").Scan(&totalTableSize, &dataSize, &indexSize)
	if err != nil {
		return nil, err
	}
	stats["total_table_size"] = totalTableSize
	stats["data_size"] = dataSize
	stats["index_size"] = indexSize
	return stats, nil
}
