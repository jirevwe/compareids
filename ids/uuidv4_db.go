package ids

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5/pgxpool"
)

// UUIDv4DBGenerator generates UUIDv4 IDs using the database
type UUIDv4DBGenerator struct{}

var _ IDGenerator = (*UUIDv4DBGenerator)(nil)

func NewUUIDv4DBGenerator() *UUIDv4DBGenerator {
	return &UUIDv4DBGenerator{}
}

func (u *UUIDv4DBGenerator) Generate() string {
	// UUIDv4 is generated by the database
	return ""
}

func (u *UUIDv4DBGenerator) Name() string {
	return "UUIDv4 (DB) - UUID"
}

func (u *UUIDv4DBGenerator) CreateTable(ctx context.Context, pool *pgxpool.Pool) error {
	_, err := pool.Exec(ctx, "CREATE TABLE IF NOT EXISTS uuidv4_table (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), n BIGINT NOT NULL)")
	return err
}

func (u *UUIDv4DBGenerator) DropTable(ctx context.Context, pool *pgxpool.Pool) error {
	_, err := pool.Exec(ctx, "DROP TABLE IF EXISTS uuidv4_table")
	return err
}

func (u *UUIDv4DBGenerator) InsertRecord(ctx context.Context, pool *pgxpool.Pool) error {
	_, err := pool.Exec(ctx, "INSERT INTO uuidv4_table (n) VALUES (1)")
	return err
}

func (u *UUIDv4DBGenerator) BulkWriteRecords(ctx context.Context, pool *pgxpool.Pool, count uint64) error {
	_, err := pool.Exec(ctx, "INSERT INTO uuidv4_table (n) SELECT g.n FROM generate_series(1, $1) AS g(n)", count)
	return err
}

func (u *UUIDv4DBGenerator) CollectStats(ctx context.Context, pool *pgxpool.Pool) (map[string]any, error) {
	stats := make(map[string]any)

	err := LoadPGStatTuple(ctx, pool)
	if err != nil {
		return nil, err
	}

	var tableStats TableStats

	err = pool.QueryRow(ctx, fmt.Sprintf(fmtStatsQuery, "uuidv4_table", "uuidv4_table", "uuidv4_table")).Scan(
		&tableStats.TotalTableSize,
		&tableStats.DataSize,
		&tableStats.IndexSize,
		&tableStats.InternalPages,
		&tableStats.LeafPages,
		&tableStats.Density,
		&tableStats.Fragmentation,
	)
	if err != nil {
		return nil, err
	}

	stats["total_table_size"] = tableStats.TotalTableSize
	stats["data_size"] = tableStats.DataSize
	stats["index_size"] = tableStats.IndexSize
	stats["index_internal_pages"] = tableStats.InternalPages
	stats["index_leaf_pages"] = tableStats.LeafPages
	stats["index_density"] = tableStats.Density
	stats["index_fragmentation"] = tableStats.Fragmentation

	// Calculate the ratio of internal pages to leaf pages
	stats["index_internal_to_leaf_ratio"] = float64(tableStats.InternalPages) / float64(tableStats.LeafPages)

	return stats, nil
}
