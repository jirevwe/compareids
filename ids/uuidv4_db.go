package ids

import (
	"context"

	"github.com/jackc/pgx/v5/pgxpool"
)

// UUIDv4DBGenerator generates UUIDv4 IDs using the database
type UUIDv4DBGenerator struct{}

var _ IDGenerator = (*UUIDv4DBGenerator)(nil)

func NewUUIDv4DBGenerator() UUIDv4DBGenerator {
	return UUIDv4DBGenerator{}
}

func (g UUIDv4DBGenerator) Generate() string {
	// UUIDv4 is generated by the database
	return ""
}

func (g UUIDv4DBGenerator) CreateTable(ctx context.Context, pool *pgxpool.Pool) error {
	_, err := pool.Exec(ctx, "CREATE TABLE IF NOT EXISTS uuidv4_table (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), n BIGINT NOT NULL)")
	return err
}

func (g UUIDv4DBGenerator) DropTable(ctx context.Context, pool *pgxpool.Pool) error {
	_, err := pool.Exec(ctx, "DROP TABLE IF EXISTS uuidv4_table")
	return err
}

func (g UUIDv4DBGenerator) InsertRecord(ctx context.Context, pool *pgxpool.Pool) error {
	_, err := pool.Exec(ctx, "INSERT INTO uuidv4_table (n) VALUES (1)")
	return err
}

func (g UUIDv4DBGenerator) BulkWriteRecords(ctx context.Context, pool *pgxpool.Pool, count uint64) error {
	_, err := pool.Exec(ctx, "INSERT INTO uuidv4_table (n) SELECT g.n FROM generate_series(1, $1) AS g(n)", count)
	return err
}

func (g UUIDv4DBGenerator) CollectStats(ctx context.Context, pool *pgxpool.Pool) (map[string]any, error) {
	stats := make(map[string]any)
	var totalTableSize, dataSize, indexSize string
	err := pool.QueryRow(ctx, statsQuery, "uuidv4_table").Scan(&totalTableSize, &dataSize, &indexSize)
	if err != nil {
		return nil, err
	}
	stats["total_table_size"] = totalTableSize
	stats["data_size"] = dataSize
	stats["index_size"] = indexSize
	return stats, nil
}
